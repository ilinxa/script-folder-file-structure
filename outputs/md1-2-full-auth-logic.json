{
    "AuthServiceCode.md": {
        "type": "file",
        "name": "AuthServiceCode.md",
        "language": "markdown",
        "content": "# AuthServiceProvider Django project\n* /auth_project\n    * __init__.py\n    * asgi.py\n    * setting.py\n    * urls.py\n    * wsgi.py\n* /user\n    * /migrations\n    * __init__.py\n    * admin.py\n    * apps.py\n    * authentication.py\n    * models.py\n    * test.py\n    * urls.py\n    * views.py\n* /venv\n* .env.local\n* .gitignore\n* requirements.txt\n---------------------------------\n## /auth_project\n### __init__.py\n### asgi.py\n\n            import os\n\n            from django.core.asgi import get_asgi_application\n\n            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth_project.settings')\n\n            application = get_asgi_application()\n\n### setting.py\n\n            ############ ME ############\n            from os import getenv, path\n            from pathlib import Path\n            from django.core.management.utils import get_random_secret_key\n            import dotenv\n            ############################\n\n            from pathlib import Path\n\n            # Build paths inside the project like this: BASE_DIR / 'subdir'.\n            BASE_DIR = Path(__file__).resolve().parent.parent\n\n            ############ ME ############\n            dotenv_file = BASE_DIR / '.env.local'\n            # load the env variables if it exists (we will not have it in production env instead we will have global env there)\n            if path.isfile(dotenv_file):\n                dotenv.load_dotenv(dotenv_file)\n\n            # secret key\n            #this will generate a random secret key if the env variable is not set\n            SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())\n\n            DEBUG = getenv(\"DEBUG\", \"False\") == \"True\"\n\n            ALLOWED_HOSTS = getenv(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\n            ############################\n\n\n            # Application definition\n            INSTALLED_APPS = [\n                'django.contrib.admin',\n                'django.contrib.auth',\n                'django.contrib.contenttypes',\n                'django.contrib.sessions',\n                'django.contrib.messages',\n                'django.contrib.staticfiles',\n            ############ ME ############\n                'corsheaders',\n                'user',\n                'rest_framework',\n                'djoser',\n                'social_django',\n            ############################\n            ]\n\n            MIDDLEWARE = [\n                'django.middleware.security.SecurityMiddleware',\n                'django.contrib.sessions.middleware.SessionMiddleware',\n                'django.middleware.common.CommonMiddleware',\n                'django.middleware.csrf.CsrfViewMiddleware',\n                'django.contrib.auth.middleware.AuthenticationMiddleware',\n                'django.contrib.messages.middleware.MessageMiddleware',\n                'django.middleware.clickjacking.XFrameOptionsMiddleware',\n                ############ ME ############\n                # this will set up my headers that i need to setup when we send responses from our server \n                # we can have these cross origin requests not get blocked by the browser\n\n                'corsheaders.middleware.CorsMiddleware',\n                ############################\n            ]\n\n\n\n            ROOT_URLCONF = 'auth_project.urls'\n\n            TEMPLATES = [\n                {\n                    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                    'DIRS': [],\n                    'APP_DIRS': True,\n                    'OPTIONS': {\n                        'context_processors': [\n                            'django.template.context_processors.debug',\n                            'django.template.context_processors.request',\n                            'django.contrib.auth.context_processors.auth',\n                            'django.contrib.messages.context_processors.messages',\n                        ],\n                    },\n                },\n            ]\n\n            WSGI_APPLICATION = 'auth_project.wsgi.application'\n\n\n            # Database\n            # https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\n            DATABASES = {\n                'default': {\n                    'ENGINE': 'django.db.backends.sqlite3',\n                    'NAME': BASE_DIR / 'db.sqlite3',\n                }\n            }\n            ############ ME ############\n            ############ AWS SES Setting \n            EMAIL_BACKEND = 'django_ses.SESBackend'\n            # Djoser setup\n            # came from venv/lib/python.../site-packages/djoser/email.py/\n\n            DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n            AWS_SES_ACCESS_KEY_ID = getenv('AWS_SES_ACCESS_KEY_ID')\n            AWS_SES_SECRET_ACCESS_KEY = getenv('AWS_SES_SECRET_ACCESS_KEY')\n            # Additionally, if you are not using the default AWS region of us-east-1,\n            # you need to specify a region, like so:\n            AWS_SES_REGION_NAME = getenv('AWS_SES_REGION_NAME')\n            AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'\n            #verify email\n            AWS_SES_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n            # If you want to use the SESv2 client\n            USE_SES_V2 = True\n\n            ########### Customize email\n\n            DOMAIN = getenv('DOMAIN')\n            SITE_NAME = getenv('SITE_NAME')\n            ############################\n\n            # Password validation\n            # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\n            AUTH_PASSWORD_VALIDATORS = [\n                {\n                    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n                },\n                {\n                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n                },\n                {\n                    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n                },\n                {\n                    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n                },\n            ]\n\n\n            # Internationalization\n            # https://docs.djangoproject.com/en/5.1/topics/i18n/\n\n            LANGUAGE_CODE = 'en-us'\n\n            TIME_ZONE = 'UTC'\n\n            USE_I18N = True\n\n            USE_TZ = True\n\n\n            # Static files (CSS, JavaScript, Images)\n            # https://docs.djangoproject.com/en/5.1/howto/static-files/\n\n            STATIC_URL = 'static/'\n\n            ############ ME ############\n            STATIC_ROOT = BASE_DIR / 'static'\n            MEDIA_URL = 'media/'\n            MEDIA_ROOT = BASE_DIR / 'media'\n            AUTHENTICATION_BACKENDS = [\n                # this is the additional one for o auth\n                'social_core.backends.google.GoogleOAuth2',\n                # 'social_core.backends.facebook.FacebookOAuth2',\n                # make sure that our defaut behavior is works\n                'django.contrib.auth.backends.ModelBackend',\n            ]\n            REST_FRAMEWORK = {\n                'DEFAULT_AUTHENTICATION_CLASSES': [\n                # 'rest_framework.authentication.BasicAuthentication',\n                # 'rest_framework.authentication.SessionAuthentication',\n                # jwt authentication\n                    'user.authentication.CustomJWTAuthentication',\n                ],\n                'DEFAULT_PERMISSION_CLASSES': [\n                    # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n                    'rest_framework.permissions.IsAuthenticated'\n                ],\n                # authentication classes\n\n            }\n\n            DJOSER = {\n                'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',\n                'SEND_ACTIVATION_EMAIL': True,\n                'ACTIVATION_URL': 'activation/{uid}/{token}',\n                'USER_CREATE_PASSWORD_RETYPE': True,\n                'PASSWORD_RESET_CONFIRM_RETYPE': True,\n                'TOKEN_MODEL': None,\n                # Oauth setup\n                'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(','),\n            }\n            #### custom authentication\n            # settings for set cookies\n            AUTH_COOKIE = 'access'\n            AUTH_COOKIE_MAX_AGE =  60 * 60 * 24 \n            AUTH_COOKIE_PATH = '/'\n            AUTH_COOKIE_SECURE = getenv(\"AUTH_COOKIE_SECURE\", \"True\") == \"True\" #ssl certificate or https\n            AUTH_COOKIE_HTTP_ONLY = True \n            AUTH_COOKIE_SAMESITE = 'None' # 'Lax', 'None', 'Strict'\n\n\n            CORS_ALLOWED_ORIGINS = getenv(\n                'CORS_ALLOWED_ORIGINS', \n                'http://localhost:3000'\n                ).split(',')\n\n            AUTH_USER_MODEL = 'user.UserAccount'\n            CORS_ALLOW_CREDENTIALS = True\n\n            SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')\n            SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')\n            SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n                'https://www.googleapis.com/auth/userinfo.email',\n                'https://www.googleapis.com/auth/userinfo.profile',\n                'openid'\n            ]\n            SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = [\n                # 'picture',\n                'first_name',\n                'last_name'\n            ]\n\n            SOCIAL_AUTH_FACEBOOK_KEY = getenv('SOCIAL_AUTH_FACEBOOK_KEY')\n            SOCIAL_AUTH_FACEBOOK_SECRET = getenv('SOCIAL_AUTH_FACEBOOK_SECRET')\n            SOCIAL_AUTH_FACEBOOK_SCOPE = [\n                'email',\n                # 'public_profile'\n            ]\n\n\n            SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {\n                'fields': 'email,first_name,last_name'\n            }\n            ############################\n\n            # Default primary key field type\n            # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\n            DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n### urls.py\n\n            from django.contrib import admin\n            from django.urls import path, include\n\n            urlpatterns = [\n                path('admin/', admin.site.urls),\n                ############## ME ##############\n                path('api/',include('djoser.urls')),\n                # path('api/', include('djoser.urls.jwt')),\n                ################################\n                path('api/',include('user.urls')),\n            ]\n\n### wsgi.py\n\n            import os\n\n            from django.core.wsgi import get_wsgi_application\n\n            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth_project.settings')\n\n            application = get_wsgi_application()\n\n---------------------------------\n## /user\n\n### __init__.py\n\n\n\n### admin.py\n\n            from django.contrib import admin\n            from .models import UserAccount\n            @admin.register(UserAccount)\n            class UserAccountAdmin(admin.ModelAdmin):\n                list_display = ('email', 'first_name', 'last_name',  'is_staff', 'is_superuser')\n                search_fields = ('email', 'first_name', 'last_name', )\n                list_filter = ( 'is_staff', 'is_superuser', 'is_active')  # Add filters for better usability\n                ordering = ('email',)  # Order by email in the admin list view\n\n### apps.py\n            from django.apps import AppConfig\n\n\n            class UserConfig(AppConfig):\n                default_auto_field = 'django.db.models.BigAutoField'\n                name = 'user'\n\n### authentication.py\n            from rest_framework_simplejwt.authentication import JWTAuthentication\n            from django.conf import settings\n            class CustomJWTAuthentication(JWTAuthentication):\n\n                # we override this in a way that if that doesnt have the header it still works \n                # because we will got it from the cookie\n                def authenticate(self, request):\n                    try:\n                    # it looks for header but we are not using it \n                        header = self.get_header(request)\n\n                        if header is None:\n                            raw_token = request.COOKIES.get(settings.AUTH_COOKIE) # we define it in the settings\n                        else:\n                            # original way\n                            raw_token = self.get_raw_token(header)\n                        \n                        if raw_token is None:\n                            return None\n\n                        validated_token = self.get_validated_token(raw_token)\n\n                        return self.get_user(validated_token), validated_token\n                    except:\n                        return None\n### models.py\n            from django.db import models\n            from django.contrib.auth.models import (\n                BaseUserManager, \n                AbstractBaseUser,\n                PermissionsMixin, #is stuff or ...\n            )\n\n            class UserAccountManager(BaseUserManager):\n                def create_user(self, email, password=None, **kwargs):\n                    if not email:\n                        raise ValueError(\"Users must have an email address\")\n                    # Normalize the email\n                    email = self.normalize_email(email)\n                    email = email.lower()\n\n                    user = self.model(\n                        email=self.normalize_email(email),\n                        **kwargs\n                    )\n\n                    user.set_password(password) # encrypt password\n                    user.save(using=self._db)\n                    return user\n\n                def create_superuser(self, email, password=None, **kwargs):\n\n                    user = self.create_user(\n                        email,\n                        password=password,\n                        **kwargs\n                    )\n                    user.is_staff = True\n                    user.is_superuser = True\n                    user.save(using=self._db)\n                    return user\n\n\n            class UserAccount(AbstractBaseUser, PermissionsMixin):\n                first_name = models.CharField(max_length=255)\n                last_name = models.CharField(max_length=255)\n                email = models.EmailField(max_length=255, unique=True)\n\n                is_active = models.BooleanField(default=True)\n                is_staff = models.BooleanField(default=False)\n                is_superuser = models.BooleanField(default=False)\n\n                objects = UserAccountManager()\n\n                USERNAME_FIELD = \"email\"\n                # Additional fiels can be added\n                REQUIRED_FIELDS = [\"first_name\", \"last_name\"]\n\n                def __str__(self):\n                    return self.email\n\n### urls.py\n\n            from django.urls import path , re_path\n            from .views import (\n                CustomProviderAuthView,\n                CustomTokenObtainPairView,\n                CustomTokenRefreshView,\n                CustomTokenVerifyView,\n                LogoutView\n            )\n            urlpatterns = [\n                re_path(\n                    r\"^o/(?P<provider>\\S+)/$\",\n                    CustomProviderAuthView.as_view(),\n                    name=\"provider-auth\",\n                ),\n                path('jwt/create/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n                path('jwt/refresh/', CustomTokenRefreshView.as_view(), name='token_refresh'),\n                path('jwt/verify/', CustomTokenVerifyView.as_view(), name='token_verify'),\n                path('logout/', LogoutView.as_view(), name='logout'),\n            ]\n### views.py\n```python\n            from django.conf import settings\n            from rest_framework_simplejwt.views import (\n                TokenObtainPairView,\n                TokenRefreshView,\n                TokenVerifyView\n            )\n            from djoser.social.views import ProviderAuthView\n            from rest_framework.views import APIView\n            from rest_framework.response import Response\n            from rest_framework import status\n            from rest_framework.permissions import AllowAny\n\n\n            class CustomProviderAuthView(ProviderAuthView):\n                def post(self, request, *args, **kwargs):\n                    response = super().post(request, *args, **kwargs)\n                    if response.status_code == 201:\n                        access_token = response.data.get('access')\n                        refresh_token = response.data.get('refresh')\n\n                        response.set_cookie(\n                            'access',\n                            access_token,\n                            max_age=settings.AUTH_COOKIE_MAX_AGE,\n                            path=settings.AUTH_COOKIE_PATH,\n                            secure=settings.AUTH_COOKIE_SECURE,\n                            httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                            samesite=settings.AUTH_COOKIE_SAMESITE,\n                        )\n\n                        response.set_cookie(\n                            'refresh',\n                            refresh_token,\n                            max_age=settings.AUTH_COOKIE_MAX_AGE,\n                            path=settings.AUTH_COOKIE_PATH,\n                            secure=settings.AUTH_COOKIE_SECURE,\n                            httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                            samesite=settings.AUTH_COOKIE_SAMESITE,\n                        )\n                    return response\n\n            ################# TokenObtainPairView OVERRIDE #################\n            class CustomTokenObtainPairView(TokenObtainPairView):\n                def post(self, request, *args, **kwargs):\n                    response = super().post(request, *args, **kwargs)\n\n                    if response.status_code == 200:\n                        access_token = response.data.get('access')\n                        refresh_token = response.data.get('refresh')\n\n                        response.set_cookie(\n                            'access',\n                            access_token,\n                            max_age=settings.AUTH_COOKIE_MAX_AGE,\n                            path=settings.AUTH_COOKIE_PATH,\n                            secure=settings.AUTH_COOKIE_SECURE,\n                            httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                            samesite=settings.AUTH_COOKIE_SAMESITE,\n                        )\n\n                        response.set_cookie(\n                            'refresh',\n                            refresh_token,\n                            max_age=settings.AUTH_COOKIE_MAX_AGE,\n                            path=settings.AUTH_COOKIE_PATH,\n                            secure=settings.AUTH_COOKIE_SECURE,\n                            httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                            samesite=settings.AUTH_COOKIE_SAMESITE,\n                        )\n\n                    return response\n                \n            ################# TokenRefreshView OVERRIDE #################\n            # set refresh token in cookie\n            class CustomTokenRefreshView(TokenRefreshView):\n                def post(self, request, *args, **kwargs):\n                    refresh_token = request.COOKIES.get('refresh')\n\n                    if refresh_token:\n                        request.data['refresh'] = refresh_token\n                    response = super().post(request, *args, **kwargs)\n\n                    if response.status_code == 200:\n                        access_token = response.data.get('access')\n\n                        response.set_cookie(\n                            'access',\n                            access_token,\n                            max_age=settings.AUTH_COOKIE_MAX_AGE,\n                            path=settings.AUTH_COOKIE_PATH,\n                            secure=settings.AUTH_COOKIE_SECURE,\n                            httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                            samesite=settings.AUTH_COOKIE_SAMESITE,\n                        )\n\n                    return response\n\n            ################# TokenVerifyView OVERRIDE #################\n            # \n            class CustomTokenVerifyView(TokenVerifyView):\n                # we are gooing to send this request to the token verify view with that token piece\n                # of data in the request and then we're going to get the response which is just going \n                # to be the status code (IS WE STILL LOGGED IN?)\n                def post(self, request, *args, **kwargs):\n                    access_token = request.COOKIES.get('access')\n\n                    if access_token:\n                        # grab the access token from the cookie\n                        # and add it to the request\n                        request.data['token'] = access_token\n                    return super().post(request, *args, **kwargs)\n\n            ################## LOGOUT VIEW #################\n            class LogoutView(APIView):\n                # I add this but I think we shouldnt need it\n                # permission_classes = [AllowAny]\n                def post(self, request, *args, **kwargs):\n                    response = Response(status=status.HTTP_204_NO_CONTENT)\n                    response.delete_cookie('access')\n                    response.delete_cookie('refresh')\n\n                    return response\n```\n-----------------------------------------\n## requirements.txt\n            asgiref==3.8.1\n            boto3==1.37.23\n            botocore==1.37.23\n            certifi==2025.1.31\n            cffi==1.17.1\n            charset-normalizer==3.4.1\n            cryptography==44.0.2\n            defusedxml==0.7.1\n            Django==5.1.7\n            django-cors-headers==4.7.0\n            django-ses==4.4.0\n            djangorestframework==3.15.2\n            djangorestframework_simplejwt==5.5.0\n            djoser==2.3.1\n            idna==3.10\n            jmespath==1.0.1\n            oauthlib==3.2.2\n            pycparser==2.22\n            PyJWT==2.9.0\n            python-dateutil==2.9.0.post0\n            python-dotenv==1.0.1\n            python3-openid==3.2.0\n            requests==2.32.3\n            requests-oauthlib==2.0.0\n            s3transfer==0.11.4\n            six==1.17.0\n            social-auth-app-django==5.4.3\n            social-auth-core==4.5.6\n            sqlparse==0.5.3\n            tzdata==2025.2\n            urllib3==2.3.0\n"
    },
    "auth_project": {
        "asgi.py": {
            "type": "file",
            "name": "asgi.py",
            "language": "python",
            "content": "\"\"\"\nASGI config for auth_project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth_project.settings')\n\napplication = get_asgi_application()\n"
        },
        "settings.py": {
            "type": "file",
            "name": "settings.py",
            "language": "python",
            "content": "############ ME ############\nfrom os import getenv, path\nfrom pathlib import Path\nfrom django.core.management.utils import get_random_secret_key\nimport dotenv\n############################\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n############ ME ############\ndotenv_file = BASE_DIR / '.env.local'\n# load the env variables if it exists (we will not have it in production env instead we will have global env there)\nif path.isfile(dotenv_file):\n    dotenv.load_dotenv(dotenv_file)\n\n# secret key\n#this will generate a random secret key if the env variable is not set\nSECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())\n\nDEBUG = getenv(\"DEBUG\", \"False\") == \"True\"\n\nALLOWED_HOSTS = getenv(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\n############################\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n############ ME ############\n    'corsheaders',\n    # 'user',\n    'rest_framework',\n    'djoser',\n    'social_django',\n############################\n    'user.apps.UserConfig'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    ############ ME ############\n    # this will set up my headers that i need to setup when we send responses from our server \n    # we can have these cross origin requests not get blocked by the browser\n\n    'corsheaders.middleware.CorsMiddleware',\n    ############################\n]\n\n\n\nROOT_URLCONF = 'auth_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'auth_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n############ ME ############\n############ AWS SES Setting \nEMAIL_BACKEND = 'django_ses.SESBackend'\n# Djoser setup\n# came from venv/lib/python.../site-packages/djoser/email.py/\n\nDEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\nAWS_SES_ACCESS_KEY_ID = getenv('AWS_SES_ACCESS_KEY_ID')\nAWS_SES_SECRET_ACCESS_KEY = getenv('AWS_SES_SECRET_ACCESS_KEY')\n# Additionally, if you are not using the default AWS region of us-east-1,\n# you need to specify a region, like so:\nAWS_SES_REGION_NAME = getenv('AWS_SES_REGION_NAME')\nAWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'\n#verify email\nAWS_SES_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n# If you want to use the SESv2 client\nUSE_SES_V2 = True\n\n########### Customize email\n\nDOMAIN = getenv('DOMAIN')\nSITE_NAME = getenv('SITE_NAME')\n############################\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n############ ME ############\nSTATIC_ROOT = BASE_DIR / 'static'\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nAUTHENTICATION_BACKENDS = [\n    # this is the additional one for o auth\n    'social_core.backends.google.GoogleOAuth2',\n    # 'social_core.backends.facebook.FacebookOAuth2',\n    # make sure that our defaut behavior is works\n    'django.contrib.auth.backends.ModelBackend',\n]\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n    # 'rest_framework.authentication.BasicAuthentication',\n    # 'rest_framework.authentication.SessionAuthentication',\n    # jwt authentication\n        'user.authentication.CustomJWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n        'rest_framework.permissions.IsAuthenticated'\n    ],\n    # authentication classes\n\n}\n\nDJOSER = {\n    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',\n    'SEND_ACTIVATION_EMAIL': True,\n    'ACTIVATION_URL': 'activation/{uid}/{token}',\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'PASSWORD_RESET_CONFIRM_RETYPE': True,\n    'TOKEN_MODEL': None,\n    # Oauth setup\n    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(','),\n}\n#### custom authentication\n# settings for set cookies\nAUTH_COOKIE = 'access'\nAUTH_COOKIE_MAX_AGE =  60 * 60 * 24 \nAUTH_COOKIE_PATH = '/'\nAUTH_COOKIE_SECURE = getenv(\"AUTH_COOKIE_SECURE\", \"True\") == \"True\" #ssl certificate or https\nAUTH_COOKIE_HTTP_ONLY = True \nAUTH_COOKIE_SAMESITE = 'None' # 'Lax', 'None', 'Strict'\n\n\nCORS_ALLOWED_ORIGINS = getenv(\n    'CORS_ALLOWED_ORIGINS', \n    'http://localhost:3000'\n    ).split(',')\n\nAUTH_USER_MODEL = 'user.UserAccount'\nCORS_ALLOW_CREDENTIALS = True\n\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n    'https://www.googleapis.com/auth/userinfo.email',\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'openid'\n]\nSOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = [\n    # 'picture',\n    'first_name',\n    'last_name'\n]\n\nSOCIAL_AUTH_FACEBOOK_KEY = getenv('SOCIAL_AUTH_FACEBOOK_KEY')\nSOCIAL_AUTH_FACEBOOK_SECRET = getenv('SOCIAL_AUTH_FACEBOOK_SECRET')\nSOCIAL_AUTH_FACEBOOK_SCOPE = [\n    'email',\n    # 'public_profile'\n]\n\n\nSOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {\n    'fields': 'email,first_name,last_name'\n}\n############################\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        "urls.py": {
            "type": "file",
            "name": "urls.py",
            "language": "python",
            "content": "\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    ############## ME ##############\n    path('api/',include('djoser.urls')),\n    # path('api/', include('djoser.urls.jwt')),\n    ################################\n    path('api/',include('user.urls')),\n]\n"
        },
        "wsgi.py": {
            "type": "file",
            "name": "wsgi.py",
            "language": "python",
            "content": "\"\"\"\nWSGI config for auth_project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        "__init__.py": {
            "type": "file",
            "name": "__init__.py",
            "language": "python",
            "content": ""
        }
    },
    "code.md": {
        "type": "file",
        "name": "code.md",
        "language": "markdown",
        "content": "# Project file Structure \n## /md1-backend-django-djoser\n-\tauth_project\n    - __init__.py\n    - asgi.py\n    - settings.py\n    - urls.py\n    - wsgi.py\n-\tuser\n    - __init__.py\n    - admin.py\n    - apps.py\n    - authentication.py\n    - models.py\n    - test.py\n    - urls.py\n    - views.py\n-\tvenv\n    - …\n-\tmanage.py\n-\t.env.local\n-\tdb.sqlite3\n-\trequirements.txt\n\n-----\n## files:\n### /auth_project/settings.py\n\n        ############ ME ############\n        from os import getenv, path\n        from pathlib import Path\n        from django.core.management.utils import get_random_secret_key\n        import dotenv\n        ############################\n\n        from pathlib import Path\n\n        # Build paths inside the project like this: BASE_DIR / 'subdir'.\n        BASE_DIR = Path(__file__).resolve().parent.parent\n\n        ############ ME ############\n        dotenv_file = BASE_DIR / '.env.local'\n        # load the env variables if it exists (we will not have it in production env instead we will have global env there)\n        if path.isfile(dotenv_file):\n            dotenv.load_dotenv(dotenv_file)\n\n        # secret key\n        #this will generate a random secret key if the env variable is not set\n        SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())\n\n        DEBUG = getenv(\"DEBUG\", \"False\") == \"True\"\n\n        ALLOWED_HOSTS = getenv(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\n        ############################\n\n\n        # Application definition\n        INSTALLED_APPS = [\n            'django.contrib.admin',\n            'django.contrib.auth',\n            'django.contrib.contenttypes',\n            'django.contrib.sessions',\n            'django.contrib.messages',\n            'django.contrib.staticfiles',\n        ############ ME ############\n            'corsheaders',\n            'user',\n            'rest_framework',\n            'djoser',\n            'social_django',\n        ############################\n        ]\n\n        MIDDLEWARE = [\n            'django.middleware.security.SecurityMiddleware',\n            'django.contrib.sessions.middleware.SessionMiddleware',\n            'django.middleware.common.CommonMiddleware',\n            'django.middleware.csrf.CsrfViewMiddleware',\n            'django.contrib.auth.middleware.AuthenticationMiddleware',\n            'django.contrib.messages.middleware.MessageMiddleware',\n            'django.middleware.clickjacking.XFrameOptionsMiddleware',\n            ############ ME ############\n            # this will set up my headers that i need to setup when we send responses from our server \n            # we can have these cross origin requests not get blocked by the browser\n\n            'corsheaders.middleware.CorsMiddleware',\n            ############################\n        ]\n\n\n\n        ROOT_URLCONF = 'auth_project.urls'\n\n        TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'DIRS': [],\n                'APP_DIRS': True,\n                'OPTIONS': {\n                    'context_processors': [\n                        'django.template.context_processors.debug',\n                        'django.template.context_processors.request',\n                        'django.contrib.auth.context_processors.auth',\n                        'django.contrib.messages.context_processors.messages',\n                    ],\n                },\n            },\n        ]\n\n        WSGI_APPLICATION = 'auth_project.wsgi.application'\n\n\n        # Database\n        # https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\n        DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': BASE_DIR / 'db.sqlite3',\n            }\n        }\n        ############ ME ############\n        ############ AWS SES Setting \n        EMAIL_BACKEND = 'django_ses.SESBackend'\n        # Djoser setup\n        # came from venv/lib/python.../site-packages/djoser/email.py/\n\n        DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n        AWS_SES_ACCESS_KEY_ID = getenv('AWS_SES_ACCESS_KEY_ID')\n        AWS_SES_SECRET_ACCESS_KEY = getenv('AWS_SES_SECRET_ACCESS_KEY')\n        # Additionally, if you are not using the default AWS region of us-east-1,\n        # you need to specify a region, like so:\n        AWS_SES_REGION_NAME = getenv('AWS_SES_REGION_NAME')\n        AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'\n        #verify email\n        AWS_SES_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n        # If you want to use the SESv2 client\n        USE_SES_V2 = True\n\n        ########### Customize email\n\n        DOMAIN = getenv('DOMAIN')\n        SITE_NAME = getenv('SITE_NAME')\n        ############################\n\n        # Password validation\n        # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\n        AUTH_PASSWORD_VALIDATORS = [\n            {\n                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n            },\n            {\n                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n            },\n            {\n                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n            },\n            {\n                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n            },\n        ]\n\n\n        # Internationalization\n        # https://docs.djangoproject.com/en/5.1/topics/i18n/\n\n        LANGUAGE_CODE = 'en-us'\n\n        TIME_ZONE = 'UTC'\n\n        USE_I18N = True\n\n        USE_TZ = True\n\n\n        # Static files (CSS, JavaScript, Images)\n        # https://docs.djangoproject.com/en/5.1/howto/static-files/\n\n        STATIC_URL = 'static/'\n\n        ############ ME ############\n        STATIC_ROOT = BASE_DIR / 'static'\n        MEDIA_URL = 'media/'\n        MEDIA_ROOT = BASE_DIR / 'media'\n        AUTHENTICATION_BACKENDS = [\n            # this is the additional one for o auth\n            'social_core.backends.google.GoogleOAuth2',\n            # 'social_core.backends.facebook.FacebookOAuth2',\n            # make sure that our defaut behavior is works\n            'django.contrib.auth.backends.ModelBackend',\n        ]\n        REST_FRAMEWORK = {\n            'DEFAULT_AUTHENTICATION_CLASSES': [\n            # 'rest_framework.authentication.BasicAuthentication',\n            # 'rest_framework.authentication.SessionAuthentication',\n            # jwt authentication\n                'user.authentication.CustomJWTAuthentication',\n            ],\n            'DEFAULT_PERMISSION_CLASSES': [\n                # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n                'rest_framework.permissions.IsAuthenticated'\n            ],\n            # authentication classes\n\n        }\n\n        DJOSER = {\n            'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',\n            'SEND_ACTIVATION_EMAIL': True,\n            'ACTIVATION_URL': 'activation/{uid}/{token}',\n            'USER_CREATE_PASSWORD_RETYPE': True,\n            'PASSWORD_RESET_CONFIRM_RETYPE': True,\n            'TOKEN_MODEL': None,\n            # Oauth setup\n            'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(','),\n        }\n        #### custom authentication\n        # settings for set cookies\n        AUTH_COOKIE = 'access'\n        AUTH_COOKIE_MAX_AGE =  60 * 60 * 24 \n        AUTH_COOKIE_PATH = '/'\n        AUTH_COOKIE_SECURE = getenv(\"AUTH_COOKIE_SECURE\", \"True\") == \"True\" #ssl certificate or https\n        AUTH_COOKIE_HTTP_ONLY = True \n        AUTH_COOKIE_SAMESITE = 'None' # 'Lax', 'None', 'Strict'\n\n\n        CORS_ALLOWED_ORIGINS = getenv(\n            'CORS_ALLOWED_ORIGINS', \n            'http://localhost:3000'\n            ).split(',')\n\n        AUTH_USER_MODEL = 'user.UserAccount'\n        CORS_ALLOW_CREDENTIALS = True\n\n        SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')\n        SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')\n        SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n            'https://www.googleapis.com/auth/userinfo.email',\n            'https://www.googleapis.com/auth/userinfo.profile',\n            'openid'\n        ]\n        SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = [\n            # 'picture',\n            'first_name',\n            'last_name'\n        ]\n\n        SOCIAL_AUTH_FACEBOOK_KEY = getenv('SOCIAL_AUTH_FACEBOOK_KEY')\n        SOCIAL_AUTH_FACEBOOK_SECRET = getenv('SOCIAL_AUTH_FACEBOOK_SECRET')\n        SOCIAL_AUTH_FACEBOOK_SCOPE = [\n            'email',\n            # 'public_profile'\n        ]\n\n        SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {\n            'fields': 'email,first_name,last_name'\n        }\n        ############################\n\n        # Default primary key field type\n        # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\n        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n\n### /auth_project/urls.py\n        \n        from django.contrib import admin\n        from django.urls import path, include\n\n        urlpatterns = [\n            path('admin/', admin.site.urls),\n            ############## ME ##############\n            path('api/',include('djoser.urls')),\n            # path('api/', include('djoser.urls.jwt')),\n            ################################\n            path('api/',include('user.urls')),\n        ]\n\n### /user/authentication.py\n        from rest_framework_simplejwt.authentication import JWTAuthentication\n        from django.conf import settings\n        class CustomJWTAuthentication(JWTAuthentication):\n\n        # we override this in a way that if that doesnt have the header it still works \n        # because we will got it from the cookie\n        def authenticate(self, request):\n        try:\n        # it looks for header but we are not using it \n            header = self.get_header(request)\n\n            if header is None:\n                raw_token = request.COOKIES.get(settings.AUTH_COOKIE) # we define it in the settings\n            else:\n                # original way\n                raw_token = self.get_raw_token(header)\n            \n            if raw_token is None:\n                return None\n\n            validated_token = self.get_validated_token(raw_token)\n\n            return self.get_user(validated_token), validated_token\n        except:\n            return None\n\n\n\n### /user/admin.py\n\n        from django.contrib import admin\n        from .models import UserAccount\n        @admin.register(UserAccount)\n        class UserAccountAdmin(admin.ModelAdmin):\n            list_display = ('email', 'first_name', 'last_name',  'is_staff', 'is_superuser')\n            search_fields = ('email', 'first_name', 'last_name', )\n            list_filter = ( 'is_staff', 'is_superuser', 'is_active')  # Add filters for better usability\n            ordering = ('email',)  # Order by email in the admin list view\n\n###/ user/models.py\n\n        from django.db import models\n        from django.contrib.auth.models import (\n            BaseUserManager, \n            AbstractBaseUser,\n            PermissionsMixin, #is stuff or ...\n        )\n\n        class UserAccountManager(BaseUserManager):\n            def create_user(self, email, password=None, **kwargs):\n                if not email:\n                    raise ValueError(\"Users must have an email address\")\n                # Normalize the email\n                email = self.normalize_email(email)\n                email = email.lower()\n\n                user = self.model(\n                    email=self.normalize_email(email),\n                    **kwargs\n                )\n\n                user.set_password(password) # encrypt password\n                user.save(using=self._db)\n                return user\n\n            def create_superuser(self, email, password=None, **kwargs):\n\n                user = self.create_user(\n                    email,\n                    password=password,\n                    **kwargs\n                )\n                user.is_staff = True\n                user.is_superuser = True\n                user.save(using=self._db)\n                return user\n\n\n        class UserAccount(AbstractBaseUser, PermissionsMixin):\n            first_name = models.CharField(max_length=255)\n            last_name = models.CharField(max_length=255)\n            email = models.EmailField(max_length=255, unique=True)\n\n            is_active = models.BooleanField(default=True)\n            is_staff = models.BooleanField(default=False)\n            is_superuser = models.BooleanField(default=False)\n\n            objects = UserAccountManager()\n\n            USERNAME_FIELD = \"email\"\n            # Additional fiels can be added\n            REQUIRED_FIELDS = [\"first_name\", \"last_name\"]\n\n            def __str__(self):\n                return self.email\n\n### /user/urls.py\n\n        from django.urls import path , re_path\n        from .views import (\n            CustomProviderAuthView,\n            CustomTokenObtainPairView,\n            CustomTokenRefreshView,\n            CustomTokenVerifyView,\n            LogoutView\n        )\n        urlpatterns = [\n            re_path(\n                r\"^o/(?P<provider>\\S+)/$\",\n                CustomProviderAuthView.as_view(),\n                name=\"provider-auth\",\n            ),\n            path('jwt/create/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n            path('jwt/refresh/', CustomTokenRefreshView.as_view(), name='token_refresh'),\n            path('jwt/verify/', CustomTokenVerifyView.as_view(), name='token_verify'),\n            path('logout/', LogoutView.as_view(), name='logout'),\n        ]\n\n### /user/views.py\n\n        from django.conf import settings\n        from rest_framework_simplejwt.views import (\n            TokenObtainPairView,\n            TokenRefreshView,\n            TokenVerifyView\n        )\n        from djoser.social.views import ProviderAuthView\n        from rest_framework.views import APIView\n        from rest_framework.response import Response\n        from rest_framework import status\n        from rest_framework.permissions import AllowAny\n\n\n        class CustomProviderAuthView(ProviderAuthView):\n            def post(self, request, *args, **kwargs):\n                response = super().post(request, *args, **kwargs)\n                if response.status_code == 201:\n                    access_token = response.data.get('access')\n                    refresh_token = response.data.get('refresh')\n\n                    response.set_cookie(\n                                        'access',\n                        access_token,\n                        max_age=settings.AUTH_COOKIE_MAX_AGE,\n                        path=settings.AUTH_COOKIE_PATH,\n                        secure=settings.AUTH_COOKIE_SECURE,\n                        httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                        samesite=settings.AUTH_COOKIE_SAMESITE,\n                    )\n\n                    response.set_cookie(\n                        'refresh',\n                        refresh_token,\n                        max_age=settings.AUTH_COOKIE_MAX_AGE,\n                        path=settings.AUTH_COOKIE_PATH,\n                        secure=settings.AUTH_COOKIE_SECURE,\n                        httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                        samesite=settings.AUTH_COOKIE_SAMESITE,\n                    )\n                return response\n\n        ################# TokenObtainPairView OVERRIDE #################\n        class CustomTokenObtainPairView(TokenObtainPairView):\n            def post(self, request, *args, **kwargs):\n                response = super().post(request, *args, **kwargs)\n\n                if response.status_code == 200:\n                    access_token = response.data.get('access')\n                    refresh_token = response.data.get('refresh')\n\n                    response.set_cookie(\n                        'access',\n                        access_token,\n                        max_age=settings.AUTH_COOKIE_MAX_AGE,\n                        path=settings.AUTH_COOKIE_PATH,\n                        secure=settings.AUTH_COOKIE_SECURE,\n                        httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                        samesite=settings.AUTH_COOKIE_SAMESITE,\n                    )\n\n                    response.set_cookie(\n                        'refresh',\n                        refresh_token,\n                        max_age=settings.AUTH_COOKIE_MAX_AGE,\n                        path=settings.AUTH_COOKIE_PATH,\n                        secure=settings.AUTH_COOKIE_SECURE,\n                        httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                        samesite=settings.AUTH_COOKIE_SAMESITE,\n                    )\n\n                return response\n            \n        ################# TokenRefreshView OVERRIDE #################\n        # set refresh token in cookie\n        class CustomTokenRefreshView(TokenRefreshView):\n            def post(self, request, *args, **kwargs):\n                refresh_token = request.COOKIES.get('refresh')\n\n                if refresh_token:\n                    request.data['refresh'] = refresh_token\n                response = super().post(request, *args, **kwargs)\n\n                if response.status_code == 200:\n                    access_token = response.data.get('access')\n\n                    response.set_cookie(\n                        'access',\n                        access_token,\n                        max_age=settings.AUTH_COOKIE_MAX_AGE,\n                        path=settings.AUTH_COOKIE_PATH,\n                        secure=settings.AUTH_COOKIE_SECURE,\n                        httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                        samesite=settings.AUTH_COOKIE_SAMESITE,\n                    )\n\n                return response\n\n        ################# TokenVerifyView OVERRIDE #################\n        # \n        class CustomTokenVerifyView(TokenVerifyView):\n            # we are gooing to send this request to the token verify view with that token piece\n            # of data in the request and then we're going to get the response which is just going \n            # to be the status code (IS WE STILL LOGGED IN?)\n            def post(self, request, *args, **kwargs):\n                access_token = request.COOKIES.get('access')\n\n                if access_token:\n                    # grab the access token from the cookie\n                    # and add it to the request\n                    request.data['token'] = access_token\n                return super().post(request, *args, **kwargs)\n\n        ################## LOGOUT VIEW #################\n        class LogoutView(APIView):\n            # I add this but I think we shouldnt need it\n            # permission_classes = [AllowAny]\n            def post(self, request, *args, **kwargs):\n                response = Response(status=status.HTTP_204_NO_CONTENT)\n                response.delete_cookie('access')\n                response.delete_cookie('refresh')\n\n                return response\n\n\n-------------\n### requirements.py\n\n        asgiref==3.8.1\n        boto3==1.37.23\n        botocore==1.37.23\n        certifi==2025.1.31\n        cffi==1.17.1\n        charset-normalizer==3.4.1\n        cryptography==44.0.2\n        defusedxml==0.7.1\n        Django==5.1.7\n        django-cors-headers==4.7.0\n        django-ses==4.4.0\n        djangorestframework==3.15.2\n        djangorestframework_simplejwt==5.5.0\n        djoser==2.3.1\n        idna==3.10\n        jmespath==1.0.1\n        oauthlib==3.2.2\n        pycparser==2.22\n        PyJWT==2.9.0\n        python-dateutil==2.9.0.post0\n        python-dotenv==1.0.1\n        python3-openid==3.2.0\n        requests==2.32.3\n        requests-oauthlib==2.0.0\n        s3transfer==0.11.4\n        six==1.17.0\n        social-auth-app-django==5.4.3\n        social-auth-core==4.5.6\n        sqlparse==0.5.3\n        tzdata==2025.2\n        urllib3==2.3.0\n\n"
    },
    "db.sqlite3": {
        "type": "file",
        "name": "db.sqlite3",
        "language": "text",
        "content": "<<BINARY OR NON-TEXT FILE>>"
    },
    "important.txt": {
        "type": "file",
        "name": "important.txt",
        "language": "text",
        "content": "1. cd md1-backend-django-djoser\n2. python -m venv venv\n3. activate  venv\n4. pip install djangorestframework django-cors-headers python-dotenv\n    - django rest framework = API handling \n    - django cores headers = we have separate origins and ports for back and front \n    - python-dotenv = for access to env variabled \n5. pip install djoser\n6. pip freeze\n        asgiref==3.8.1\n        certifi==2025.1.31\n        cffi==1.17.1\n        charset-normalizer==3.4.1\n        cryptography==44.0.2\n        defusedxml==0.7.1\n        Django==5.1.7\n        django-cors-headers==4.7.0\n        djangorestframework==3.15.2\n        djangorestframework_simplejwt==5.5.0\n        djoser==2.3.1\n        idna==3.10\n        oauthlib==3.2.2\n        pycparser==2.22\n        PyJWT==2.9.0\n        python-dotenv==1.0.1\n        python3-openid==3.2.0\n        requests==2.32.3\n        requests-oauthlib==2.0.0\n        social-auth-app-django==5.4.3\n        social-auth-core==4.5.6\n        sqlparse==0.5.3\n        tzdata==2025.2\n        urllib3==2.3.0\n\n7. pip freeze > requirements.txt\n8. django-admin startproject auth-project .\n\n/////////// User App ////////////////\n***Authentication setups***\n1. python manage.py startapp user\n2. create .env.local in root\n3. settings:\n    - use this helper docs deploy a django app on app platform\n    https://www.digitalocean.com/community/tutorials/how-to-deploy-django-to-app-platform \n    - customize the setings.py\n        ... imports\n        ############ ME ############\n        dotenv_file = BASE_DIR / '.env.local'\n        # load the env variables if it exists (we will not have it in production env instead we will have global env there)\n        if path.isfile(dotenv_file):\n            dotenv.load_dotenv(dotenv_file)\n        # secret key\n        #this will generate a random secret key if the env variable is not set\n        SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())\n        DEBUG = getenv(\"DEBUG\", \"False\") == \"True\"\n        ALLOWED_HOSTS = getenv(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\n\n        ############################\n    - rest framework setup\n        https://www.django-rest-framework.org/ \n\n        INSTALLED_APPS = [\n            ...\n            'user',\n            'rest_framework',\n        ]\n    - by defult we have to be authenticated\n        REST_FRAMEWORK = {\n            # Use Django's standard `django.contrib.auth` permissions,\n            # or allow read-only access for unauthenticated users.\n            'DEFAULT_PERMISSION_CLASSES': [\n                'rest_framework.permissions.IsAuthenticated'\n            ]\n        }\n        - we also need to set authentication classes\n        'DEFAULT_AUTHENTICATION_CLASSES': [\n            * here we need to use jwt docs and djoser\n             'rest_framework_simplejwt.authentication.JWTAuthentication',\n        ]\n        #######################################################\n        - Djoser helper docs:\n            https://djoser.readthedocs.io/en/latest/getting_started.html\n        - add djoser to installed apps \n\n\n######## Djoser Setup #######\nfrom django.urls import path, include\n    1. in urls.py :\n    \n        urlpatterns = [\n            ...\n            path('api/',include('djoser.urls')), #this dont giv us the jwt urls just gaves the other ones \n            path('api/', include('djoser.urls.jwt')), \n        ]\n    2. add Djoser to installed apps            \n        INSTALLED_APPS = [\n                ...\n                'djoser',\n            ]\n    3. STATIC_ROOT = BASE_DIR / 'static'\n    4. MEDIA_URL = 'media/'\n    5. MEDIA_ROOT = BASE_DIR / 'media'\n    6. djoser settings:\n        DJOSER = {\n            'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',\n            'SEND_ACTIVATION-EMAIL': True,\n            'ACTIVATION_URL': 'activation/{uid}/{token}',\n            'USER_CREATE_PASSWORD_RETYPE': True,\n            'PASSWORD_RESET_CONFIRM_RETYPE': True,\n            'TOKEN_MODEL': None\n        }\n        *****here we can run the server to test is there any error\n\n##### Custom User Model ######\n    1. user/models.py\n    2. check these documentation \n    https://docs.djangoproject.com/en/5.1/topics/auth/customizing/\n    3.use the full example \n    4. customize it \n    5. add this to the setting:\n        AUTH_USER_MODEL = 'user.UserAccountManager'\n    6.\n\n\n##############################################\n################## aws setup #################\n##############################################\n** we will use aws ses service for sending email: **\n*** use this docs to set them up: ***\n* https://github.com/django-ses/django-ses\n* we dont wanna sending stats in this project \n\n1. pip install django-ses\n2. pip freeze requirements.txt\n3. rerune the server: python manage.py runserver localhost:8000\n    1. add this to setting: EMAIL_BACKEND = 'django_ses.SESBackend'\n    2. AWS_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\n    3. AWS_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n    we will use digital ocean spaces which is very similar to AWS S3 buckets, that is also going to have an access and secret key\n    where you would like to use a separate access key to send emails via SES than you would to upload files via S3:\n    2.1. AWS_SES_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\n    3.1. AWS_SES_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n    behined the scenes they're also using the python boto3 package to do that communication \n    4. # If you want to use the SESv2 client\n    USE_SES_V2 = True\n    5.you need to specify a region, like so:\n    AWS_SES_REGION_NAME = 'us-west-2'\n    AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'\n\n    6. AWS_SES_FROM_EMAIL\n    Optional. The email address to be used as the \"From\" address for the email. The address that you specify has to be verified. For more information please refer to https://boto3.amazonaws.com/v1/documentation/api/1.26.31/reference/services/sesv2.html#SESV2.Client.send_email\n\n    7.# Djoser setup\n    # came from venv/lib/python.../site-packages/djoser/email.py/\n    DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')\n    *** we will set these as env variable ***\n    # AWS Email Ses System setup\n    AWS_SES_ACCESS_KEY_ID=''\n    AWS_SES_SECRET_ACCESS_KEY=''\n    AWS_SES_REGION_NAME=''\n    AWS_SES_FROM_EMAIL=''\n\n    8. now we have to set up our aws account\n    * we need to set 2 email in development state 1 for sending the email and second for receiving the email but in production mode we just need 1 email as our from email \n        1. https://aws.amazon.com/\n        2. create an account\n        3. if we signed in to the root user:\n            - menu > users > add user > eg:Admin > set the policy (Administrator Access)\n        4. create a user group/ add administratorAccess and Billing policy to that\n\n        5. search for SES (amazon simple email service)\n            1. set the region (ca-central-1) => copy and paset it in env variable\n            AWS_SES_REGION_NAME='ca-central-1'\n            2. set the email env variable: \n            AWS_SES_FROM_EMAIL='ilinxagroup@gmail.com'\n            3. in the ses panel go to the Verify identities\n                1. creat identity\n                2. email address\n                3. add email\n                4. create identity\n                5. Verify that by link that sent to the mail address\n                6. do it again for other email\n                7. back to the identity menu \n                * we will see the emailes that we added\n                8. now go to the smtp settings \n                9. create SMTP credentials\n                10. we will have username SMTP\n                11. create user\n                .... we will get credentials now \n                \n                #############################\n                    IAM user name\n                    ses-smtp-user.20250331-140922\n\n                    SMTP user name\n                    AKIAZQ3DQ2QO3ATDIC4T\n\n                    SMTP password\n                    BBVJv3tpNAA1ddbYXwM5P/JoDSLRRXLQXLSIKyTDmCEj\n                ####################################\n                * note: sometimes they dont work \n                so we need to recreate them :\n                    1. go to the user \n                    2. security credentials\n                    3. delete the access key \n                    4. create access key\n                    5. local code\n                    6. create the access key \n                    7. grab the created values and pased it in the env \n                    8. in main page we should set the permissions:\n                        1. add permissions\n                        2. Attach policies directly\n                        3. AmazonSESReadOnlyAccess\n                        4. add permissions\n\n    9. now we can test it by postman\n    \n\n\n\n##########################################\nIAM user sign in\naccount id or alias\n654654362653\n\nIAM username:\nadmin\n\npassword\n********\n###########################################\n\n    10. test endpoints based on this doc:\n    https://djoser.readthedocs.io/en/latest/base_endpoints.html\n\n    11. email template: \n    \\md1-backend-django-djoser\\venv\\Lib\\site-packages\\djoser\\templates\\email\\activation.html\n\n    we have to change site name inside the domain here \n \n    find BaseDjoserEmail in the email.py\n\n    we customize them from setting:\n\n\nhttps://youtu.be/2pZmxh8Tf78?t=5213 \n\n    12. add corsheaders to the installed app\n        set up middelwear for that\n        'corsheaders.middleware.CorsMiddleware'\n        https://pypi.org/project/django-cors-headers/\n        then we have to set up which origins are allowed\n\n        CORS_ALLOWED_ORIGINS = getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000', 'http://127.0.0.1:3000').split(',')\n\n        CORS_ALLOW_CREDENTIALS = True\n        #our responces is going to set up a cross origin allow credentials heading \n        # it is going to allow cookies to be getting sent cross domain  \n        we will have different ports that counts as cross domains in our development environment \n\n        in front end when we make ajax request we are going to include an option called credentials include and  that's going to allow the cookies to get included in the request and we neet this that the browser doesnt block the cookies when they are comming back \n\n        now we have to override the behavior of djoser and simple jwt \n        **** HTTP only method ****\n        /user/authentication.py\n\n        a. \n        'rest_framework_simplejwt.authentication.JWTAuthentication'=> override this \n    13.oauth\n    \n        a. add social_django to installed app\n        b. do migration => python manage.py migrate\n        c. set authentication backends: AUTHENTICATION_BACKENDS\n        d. custom view for coojies setu \n        \n-------------------------------------------\nget google oauth credentials:\n1. create a project\n2. side menu\n3. api and services\n4. credentials\n    a. app information (name and email)\n    b. external\n    c. create client\n    d. add 3 top scope\n\n\n\n\n\n\n\n\n\n\n"
    },
    "manage.py": {
        "type": "file",
        "name": "manage.py",
        "language": "python",
        "content": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    "README.md": {
        "type": "file",
        "name": "README.md",
        "language": "markdown",
        "content": "<<BINARY OR NON-TEXT FILE>>"
    },
    "requirements.txt": {
        "type": "file",
        "name": "requirements.txt",
        "language": "text",
        "content": "<<ERROR: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte>>"
    },
    "user": {
        "admin.py": {
            "type": "file",
            "name": "admin.py",
            "language": "python",
            "content": "from django.contrib import admin\nfrom .models import UserAccount, InvitationToken, ReferralSettings\nfrom django.utils import timezone\n\n@admin.register(UserAccount)\nclass UserAccountAdmin(admin.ModelAdmin):\n    list_display =  ('email', 'first_name', 'last_name', 'is_staff', 'is_superuser', 'total_invitations', 'active_invitations', 'invited_by')\n    search_fields = ('email', 'first_name', 'last_name', 'invited_by__email')\n    list_filter = ('is_staff', 'is_superuser', 'is_active')\n    def total_invitations(self, obj):\n        return obj.generated_tokens.count()\n\n    def active_invitations(self, obj):\n        return obj.generated_tokens.filter(is_used=False, expires_at__gt=timezone.now()).count()\n    def inviter_email(self, obj):\n        if obj.invited_by:\n            return obj.invited_by.email\n        return '-'\n\n    inviter_email.short_description = \"Invited By Email\"\n    total_invitations.short_description = \"Total Invitations\"\n    active_invitations.short_description = \"Active Invitations\"\n    # This helps admins quickly see who has sent how many invites.\n@admin.register(InvitationToken)\nclass InvitationTokenAdmin(admin.ModelAdmin):\n    list_display = ('token', 'inviter', 'is_used', 'created_at')\n    list_filter = ('is_used',)\n\n# This gives admins a UI to control referral behavior.\n@admin.register(ReferralSettings)\nclass ReferralSettingsAdmin(admin.ModelAdmin):\n    list_display = ('max_tokens_per_user', 'allow_unlimited_tokens', 'token_expiration_days')\n    fields = ['max_tokens_per_user', 'allow_unlimited_tokens', 'token_expiration_days']"
        },
        "apps.py": {
            "type": "file",
            "name": "apps.py",
            "language": "python",
            "content": "from django.apps import AppConfig\n\n\nclass UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'\n\n    def ready(self):\n        import user.signals  # noqa"
        },
        "authentication.py": {
            "type": "file",
            "name": "authentication.py",
            "language": "python",
            "content": "from rest_framework_simplejwt.authentication import JWTAuthentication\nfrom django.conf import settings\nclass CustomJWTAuthentication(JWTAuthentication):\n\n    # we override this in a way that if that doesnt have the header it still works \n    # because we will got it from the cookie\n    def authenticate(self, request):\n        try:\n        # it looks for header but we are not using it \n            header = self.get_header(request)\n\n            if header is None:\n                raw_token = request.COOKIES.get(settings.AUTH_COOKIE) # we define it in the settings\n            else:\n                # original way\n                raw_token = self.get_raw_token(header)\n            \n            if raw_token is None:\n                return None\n\n            validated_token = self.get_validated_token(raw_token)\n\n            return self.get_user(validated_token), validated_token\n        except:\n            return None"
        },
        "migrations": {
            "0001_initial.py": {
                "type": "file",
                "name": "0001_initial.py",
                "language": "python",
                "content": "# Generated by Django 5.1.7 on 2025-05-23 17:33\n\nimport django.db.models.deletion\nimport uuid\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='UserAccount',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('first_name', models.CharField(max_length=255)),\n                ('last_name', models.CharField(max_length=255)),\n                ('email', models.EmailField(max_length=255, unique=True)),\n                ('is_active', models.BooleanField(default=True)),\n                ('is_staff', models.BooleanField(default=False)),\n                ('is_superuser', models.BooleanField(default=False)),\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),\n                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invited_users', to=settings.AUTH_USER_MODEL)),\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),\n            ],\n            options={\n                'abstract': False,\n            },\n        ),\n        migrations.CreateModel(\n            name='Invitation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),\n                ('is_used', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"
            },
            "0002_useraccount_is_visitor_alter_useraccount_invited_by_and_more.py": {
                "type": "file",
                "name": "0002_useraccount_is_visitor_alter_useraccount_invited_by_and_more.py",
                "language": "python",
                "content": "# Generated by Django 5.1.7 on 2025-05-24 09:36\n\nimport django.db.models.deletion\nimport uuid\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('user', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='useraccount',\n            name='is_visitor',\n            field=models.BooleanField(default=False),\n        ),\n        migrations.AlterField(\n            model_name='useraccount',\n            name='invited_by',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referred_users', to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.CreateModel(\n            name='InvitationToken',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),\n                ('is_used', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_tokens', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.DeleteModel(\n            name='Invitation',\n        ),\n    ]\n"
            },
            "0003_referralsettings_invitationtoken_expires_at.py": {
                "type": "file",
                "name": "0003_referralsettings_invitationtoken_expires_at.py",
                "language": "python",
                "content": "# Generated by Django 5.1.7 on 2025-05-25 12:16\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('user', '0002_useraccount_is_visitor_alter_useraccount_invited_by_and_more'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ReferralSettings',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('max_tokens_per_user', models.PositiveIntegerField(default=5)),\n                ('allow_unlimited_tokens', models.BooleanField(default=False)),\n                ('token_expiration_days', models.PositiveIntegerField(default=7)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='invitationtoken',\n            name='expires_at',\n            field=models.DateTimeField(blank=True, null=True),\n        ),\n    ]\n"
            },
            "__init__.py": {
                "type": "file",
                "name": "__init__.py",
                "language": "python",
                "content": ""
            }
        },
        "models.py": {
            "type": "file",
            "name": "models.py",
            "language": "python",
            "content": "from django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, \n    AbstractBaseUser,\n    PermissionsMixin, #is stuff or ...\n)\nimport uuid\nfrom datetime import timedelta\nfrom django.utils import timezone\n\n# ##################################\n# Invitation token model\n# ##################################\nclass InvitationToken(models.Model):\n    inviter = models.ForeignKey(\n        'UserAccount',\n        on_delete=models.CASCADE,\n        related_name='generated_tokens'\n    )\n    token = models.UUIDField(default=uuid.uuid4, unique=True)\n    is_used = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    # Now tokens expire after X days based on global settings.\n    expires_at = models.DateTimeField(null=True, blank=True)\n\n    # def save(self, *args, **kwargs):\n    #     if not self.expires_at:\n    #         try:\n    #             settings = ReferralSettings.objects.first()\n    #             days = settings.token_expiration_days if settings else 7\n    #             self.expires_at = self.created_at + timedelta(days=days)\n    #         except Exception:\n    #             # Now tokens expire after X days based on global settings.\n    #             self.expires_at = self.created_at + timedelta(days=7)\n    #     super().save(*args, **kwargs)\n\n    def __str__(self):\n        return f\"{self.inviter.email} -> {self.token}\"\n    def is_valid(self):\n        return not self.is_used and self.expires_at > timezone.now()\n    \n# ##################################\n# User Account Manager Models\n# ##################################\nclass UserAccountManager(BaseUserManager):\n    def create_user(self, email, password=None, **kwargs):\n        if not email:\n            raise ValueError(\"Users must have an email address\")\n        # Normalize the email\n        email = self.normalize_email(email)\n        email = email.lower()\n\n        user = self.model(\n            email=self.normalize_email(email),\n            **kwargs\n        )\n        user.set_password(password) # encrypt password\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **kwargs):\n        user = self.create_user(\n            email,\n            password=password,\n            **kwargs\n        )\n        user.is_staff = True\n        user.is_superuser = True\n        user.save(using=self._db)\n        return user\n\n# ##################################\n# User Account Models\n# ##################################\nclass UserAccount(AbstractBaseUser, PermissionsMixin):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    email = models.EmailField(max_length=255, unique=True)\n\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    # Set by superuser\n    is_visitor = models.BooleanField(default=False)\n    # refferals\n    invited_by = models.ForeignKey(\n        'self', \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name='referred_users'\n    )\n    objects = UserAccountManager()\n    USERNAME_FIELD = \"email\"\n    # Additional fiels can be added\n    REQUIRED_FIELDS = [\"first_name\", \"last_name\"]\n    def __str__(self):\n        return self.email\n    \n# ##################################\n# Referral Settings Models\n# ##################################\nclass ReferralSettings(models.Model):\n    max_tokens_per_user = models.PositiveIntegerField(default=5)\n    allow_unlimited_tokens = models.BooleanField(default=False)\n    token_expiration_days = models.PositiveIntegerField(default=7)\n\n    def __str__(self):\n        return \"Referral System Settings\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n####################### READ MORE ABOUT THESE #####################\n    # def has_perm(self, perm, obj=None):\n    #     \"Does the user have a specific permission?\"\n    #     # Simplest possible answer: Yes, always\n    #     return True\n\n    # def has_module_perms(self, app_label):\n    #     \"Does the user have permissions to view the app `app_label`?\"\n    #     # Simplest possible answer: Yes, always\n    #     return True\n\n    # @property\n    # def is_staff(self):\n    #     \"Is the user a member of staff?\"\n    #     # Simplest possible answer: All admins are staff\n    #     return self.is_admin"
        },
        "serializers.py": {
            "type": "file",
            "name": "serializers.py",
            "language": "python",
            "content": "# /user/serializers.py\n\nfrom rest_framework import serializers\n\nclass GenerateInvitationTokenSerializer(serializers.Serializer):\n    pass  # No input needed; just used for documentation or validation if needed\n# This is a placeholder for now — you can expand it later if needed."
        },
        "signals.py": {
            "type": "file",
            "name": "signals.py",
            "language": "python",
            "content": "# /user/signals.py\n\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom .models import InvitationToken, ReferralSettings\nfrom django.utils import timezone\nfrom datetime import timedelta\n\n@receiver(post_save, sender=InvitationToken)\ndef set_invitation_token_expires_at(sender, instance, created, **kwargs):\n    if created:\n        # Only run once when token is created\n        settings = ReferralSettings.objects.first()\n        days = settings.token_expiration_days if settings else 7\n        instance.expires_at = instance.created_at + timedelta(days=days)\n        instance.save(update_fields=['expires_at'])"
        },
        "tests.py": {
            "type": "file",
            "name": "tests.py",
            "language": "python",
            "content": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        "urls.py": {
            "type": "file",
            "name": "urls.py",
            "language": "python",
            "content": "from django.urls import path , re_path\nfrom .views import (\n    CustomProviderAuthView,\n    CustomTokenObtainPairView,\n    CustomTokenRefreshView,\n    CustomTokenVerifyView,\n    ResendActivationView,\n    LogoutView,\n    GenerateInviteLinkView,\n)\nurlpatterns = [\n    re_path(\n        r\"^o/(?P<provider>\\S+)/$\",\n        CustomProviderAuthView.as_view(),\n        name=\"provider-auth\",\n    ),\n    path('jwt/create/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('jwt/refresh/', CustomTokenRefreshView.as_view(), name='token_refresh'),\n    path('jwt/verify/', CustomTokenVerifyView.as_view(), name='token_verify'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n\n    # New endpoint\n    path('resend-activation/', ResendActivationView.as_view(), name='resend_activation'),\n    # path('register/', CustomRegisterView.as_view(), name='custom_register'),\n    path('generate-invite/', GenerateInviteLinkView.as_view(), name='generate_invite'),\n]"
        },
        "views.py": {
            "type": "file",
            "name": "views.py",
            "language": "python",
            "content": "from django.conf import settings\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n    TokenVerifyView,\n    )\nfrom rest_framework_simplejwt.tokens import AccessToken\nfrom djoser.social.views import ProviderAuthView\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework.permissions import AllowAny, IsAuthenticated\nfrom rest_framework.generics import CreateAPIView\n# Djoser\nfrom djoser.email import ActivationEmail\n# Models\nfrom .models import UserAccount, InvitationToken, ReferralSettings\nimport urllib.parse\nfrom rest_framework.exceptions import ValidationError\n\nfrom .serializers import GenerateInvitationTokenSerializer\nfrom django.core.exceptions import ObjectDoesNotExist\nimport logging\n\n# referral_token\n# ##################################\n# 🔁 Resend Activation Email View\n# ##################################\nclass ResendActivationView(APIView):\n    permission_classes = [AllowAny]\n    def post(self, request, *args, **kwargs):\n        email = request.data.get(\"email\")\n        if not email:\n            return Response(\n                {\"email\": [\"This field is required.\"]},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        try:\n            user = UserAccount.objects.get(email=email)\n        except UserAccount.DoesNotExist:\n            return Response(\n                {\"detail\": \"No account found with this email address.\"},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        if user.is_active:\n            return Response(\n                {\"detail\": \"This account is already activated.\"},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        context = {\"user\": user}\n        ActivationEmail(request, context).send([user.email])\n\n        return Response(\n            {\"detail\": \"Activation email has been resent.\"}, \n            status=status.HTTP_200_OK\n        )\n\n# ##################################\n# 📦 Custom JWT Authentication Views\n# ##################################\n\n\n\nlogger = logging.getLogger(__name__)\n\nclass CustomProviderAuthView(ProviderAuthView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n\n        if response.status_code == 201:\n            access_token = response.data.get('access')\n            refresh_token = response.data.get('refresh')\n\n            # Set cookies\n            response.set_cookie(\n                'access',\n                access_token,\n                max_age=settings.AUTH_COOKIE_MAX_AGE,\n                path=settings.AUTH_COOKIE_PATH,\n                secure=settings.AUTH_COOKIE_SECURE,\n                httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                samesite=settings.AUTH_COOKIE_SAMESITE,\n            )\n            response.set_cookie(\n                'refresh',\n                refresh_token,\n                max_age=settings.AUTH_COOKIE_MAX_AGE,\n                path=settings.AUTH_COOKIE_PATH,\n                secure=settings.AUTH_COOKIE_SECURE,\n                httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                samesite=settings.AUTH_COOKIE_SAMESITE,\n            )\n\n            try:\n                # Get user from JWT\n                token = AccessToken(access_token)\n                user_id = token['user_id']\n                user = UserAccount.objects.get(id=user_id)\n\n                # Only apply referral logic if:\n                # 1. This is the first login\n                # 2. invited_by is not already set\n                if not user.last_login or user.invited_by is None:\n                    referral_token = request.COOKIES.get('referral_token')\n\n                    if referral_token:\n                        try:\n                            token_obj = InvitationToken.objects.get(token=referral_token)\n                            if token_obj.is_valid():  # Uses model method `is_valid()`\n                                user.invited_by = token_obj.inviter\n                                user.save(update_fields=['invited_by'])\n                                token_obj.is_used = True\n                                token_obj.save()\n                                response.delete_cookie('referral_token')\n                            else:\n                                logger.warning(\"Expired or invalid token used during OAuth2\")\n                                response.delete_cookie('referral_token')\n                        except InvitationToken.DoesNotExist:\n                            logger.warning(\"Invalid token used during OAuth2\")\n                            response.delete_cookie('referral_token')\n\n            except (ObjectDoesNotExist, Exception) as e:\n                logger.error(f\"Error applying referral token: {e}\")\n\n        return response\n# ##################################\n# Token Obtain Pair View OVERRIDE\n# ##################################\n\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n\n        if response.status_code == 200:\n            access_token = response.data.get('access')\n            refresh_token = response.data.get('refresh')\n\n            # Set cookies\n            response.set_cookie(\n                'access',\n                access_token,\n                max_age=settings.AUTH_COOKIE_MAX_AGE,\n                path=settings.AUTH_COOKIE_PATH,\n                secure=settings.AUTH_COOKIE_SECURE,\n                httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                samesite=settings.AUTH_COOKIE_SAMESITE,\n            )\n            response.set_cookie(\n                'refresh',\n                refresh_token,\n                max_age=settings.AUTH_COOKIE_MAX_AGE,\n                path=settings.AUTH_COOKIE_PATH,\n                secure=settings.AUTH_COOKIE_SECURE,\n                httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                samesite=settings.AUTH_COOKIE_SAMESITE,\n            )\n\n            try:\n                # Get user from JWT\n                token = AccessToken(access_token)\n                user_id = token['user_id']\n                user = UserAccount.objects.get(id=user_id)\n\n                # Only apply referral logic if:\n                # 1. This is the first login\n                # 2. invited_by is not already set\n                if not user.last_login or user.invited_by is None:\n                    referral_token = request.COOKIES.get('referral_token')\n\n                    if referral_token:\n                        try:\n                            token_obj = InvitationToken.objects.get(token=referral_token)\n                            if token_obj.is_valid():  # defined earlier in model\n                                user.invited_by = token_obj.inviter\n                                user.save(update_fields=['invited_by'])\n                                token_obj.is_used = True\n                                token_obj.save()\n                                response.delete_cookie('referral_token')\n                            else:\n                                logger.warning(\"Expired or invalid token used during login\")\n                                response.delete_cookie('referral_token')\n                        except InvitationToken.DoesNotExist:\n                            logger.warning(\"Invalid token used during login\")\n                            response.delete_cookie('referral_token')\n\n            except Exception as e:\n                logger.error(f\"Error applying referral token: {e}\")\n\n        return response\n# ##################################\n# Token Refresh View OVERRIDE \n# ##################################\n# set refresh token in cookie\n\nclass CustomTokenRefreshView(TokenRefreshView):\n    def post(self, request, *args, **kwargs):\n        refresh_token = request.COOKIES.get('refresh')\n\n        if refresh_token:\n            request.data['refresh'] = refresh_token\n        response = super().post(request, *args, **kwargs)\n\n        if response.status_code == 200:\n            access_token = response.data.get('access')\n\n            response.set_cookie(\n                'access',\n                access_token,\n                max_age=settings.AUTH_COOKIE_MAX_AGE,\n                path=settings.AUTH_COOKIE_PATH,\n                secure=settings.AUTH_COOKIE_SECURE,\n                httponly=settings.AUTH_COOKIE_HTTP_ONLY,\n                samesite=settings.AUTH_COOKIE_SAMESITE,\n            )\n        return response\n\n# ##################################\n# Token Verify View OVERRIDE\n# ##################################\nclass CustomTokenVerifyView(TokenVerifyView):\n    # we are gooing to send this request to the token verify view with that token piece\n    # of data in the request and then we're going to get the response which is just going \n    # to be the status code (IS WE STILL LOGGED IN?)\n    def post(self, request, *args, **kwargs):\n        access_token = request.COOKIES.get('access')\n\n        if access_token:\n            # grab the access token from the cookie\n            # and add it to the request\n            request.data['token'] = access_token\n        return super().post(request, *args, **kwargs)\n\n# ##################################\n# 🎟️ LOGOUT Views\n# ##################################\n\nclass LogoutView(APIView):\n    # I add this but I think we shouldnt need it\n    # permission_classes = [AllowAny]\n    def post(self, request, *args, **kwargs):\n        response = Response(status=status.HTTP_204_NO_CONTENT)\n        response.delete_cookie('access')\n        response.delete_cookie('refresh')\n\n        return response\n    \n# ##################################\n# 🎟️ Invitation Token Views\n# ##################################\n\nclass GenerateInviteLinkView(CreateAPIView):\n    permission_classes = [IsAuthenticated]\n    queryset = InvitationToken.objects.all()\n    serializer_class = GenerateInvitationTokenSerializer  # ← Added\n\n    def perform_create(self, serializer):\n        user = self.request.user\n                # Get or create default referral settings\n        settings = ReferralSettings.objects.first()\n        if not settings:\n            settings = ReferralSettings.objects.create()\n\n        if not user.is_superuser and not settings.allow_unlimited_tokens:\n            active_token_count = InvitationToken.objects.filter(inviter=user, is_used=False).count()\n            if active_token_count >= settings.max_tokens_per_user:\n                raise ValidationError({\n                    \"detail\": f\"You have reached the maximum limit of {settings.max_tokens_per_user} tokens.\"\n                })\n        return InvitationToken.objects.create(inviter=user)\n# This ensures non-admin users are limited to the number of tokens they can generate. \n    def create(self, request, *args, **kwargs):\n        token_obj = self.perform_create(None)\n        # WE NEED TO UPDATE THIS\n        register_url = getattr(settings, 'FRONTEND_REGISTER_URL', 'http://localhost:3000/register')\n\n        # Build full invite link with token\n        params = {'token': str(token_obj.token)}\n        invite_link = f\"{register_url}?{urllib.parse.urlencode(params)}\"\n\n        return Response({\n            \"token\": str(token_obj.token),\n            \"invite_link\": invite_link,\n            \"message\": \"Share this link with someone to invite them.\"\n        }, status=status.HTTP_201_CREATED)"
        },
        "__init__.py": {
            "type": "file",
            "name": "__init__.py",
            "language": "python",
            "content": ""
        }
    }
}